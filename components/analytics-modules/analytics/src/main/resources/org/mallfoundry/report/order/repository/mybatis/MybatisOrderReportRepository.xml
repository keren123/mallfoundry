<?xml version="1.0" encoding="UTF-8" ?>
<!--
  ~ Copyright (C) 2019-2020 the original author or authors.
  ~
  ~ This program is free software; you can redistribute it and/or
  ~ modify it under the terms of the GNU General Public License
  ~ as published by the Free Software Foundation; either version 2
  ~ of the License, or (at your option) any later version.
  ~
  ~ This program is distributed in the hope that it will be useful,
  ~ but WITHOUT ANY WARRANTY; without even the implied warranty of
  ~ MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  ~ GNU General Public License for more details.
  ~
  ~ You should have received a copy of the GNU General Public License
  ~ along with this program; if not, write to the Free Software
  ~ Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
  -->

<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="org.mallfoundry.report.order.repository.mybatis.MybatisOrderReportRepository">

    <resultMap id="DailyOrderResultMap" type="org.mallfoundry.report.order.DefaultDailyOrder">
        <id property="date" column="date_"/>
        <result property="totalCount" column="total_count_"/>
        <result property="totalQuantity" column="total_quantity_"/>
        <result property="totalPrice" column="total_price_"/>
        <result property="totalAmount" column="total_amount_"/>
    </resultMap>

    <resultMap id="MonthlyOrderResultMap" type="org.mallfoundry.report.order.DefaultMonthlyOrder">
        <id property="yearMonth" column="year_month_"/>
        <id property="month" column="month_"/>
        <result property="totalCount" column="total_count_"/>
        <result property="totalQuantity" column="total_quantity_"/>
        <result property="totalPrice" column="total_price_"/>
        <result property="totalAmount" column="total_amount_"/>
    </resultMap>

    <resultMap id="TotalOrdersResultMap" type="org.mallfoundry.report.order.DefaultTotalOrders">
        <result property="totalCount" column="total_count_"/>
        <result property="totalQuantity" column="total_quantity_"/>
        <result property="totalPrice" column="total_price_"/>
        <result property="totalAmount" column="total_amount_"/>
    </resultMap>

    <select id="queryDailyOrders" resultMap="DailyOrderResultMap">
        select date.date_ as date_,
        coalesce(count(fact.paid_date_key_), 0) as total_count_,
        coalesce(sum(fact.total_price_), 0) as total_price_,
        coalesce(sum(fact.total_quantity_), 0) as total_quantity_,
        coalesce(sum(fact.total_amount_), 0) as total_amount_
        from mf_edw_date_dimension date
        left join (select fact.paid_date_key_,
        fact.total_price_,
        fact.total_quantity_,
        fact.total_amount_
        from mf_edw_order_fact fact
        <where>
            <if test="query.tenantId != null">
                and fact.tenant_key_ = #{query.tenantId}
            </if>
            <if test="query.storeId != null">
                and fact.store_key_ = #{query.storeId}
            </if>
            <if test="query.customerId != null">
                and fact.customer_key_ = #{query.customerId}
            </if>
        </where>
        ) fact on (date.key_ = fact.paid_date_key_)
        where
        <trim prefixOverrides="and">
            <if test="query.dateFrom != null">
                and #{query.dateFrom} <![CDATA[<=]]> date.date_
            </if>
            <if test="query.dateTo != null">
                and date.date_ <![CDATA[<=]]> #{query.dateTo}
            </if>
        </trim>
        group by date.date_
        order by date.date_
    </select>

    <select id="queryMonthlyOrders" resultMap="MonthlyOrderResultMap">
        select date.date_ as date_,
        coalesce(count(fact.paid_date_key_), 0) as total_count_,
        coalesce(sum(fact.total_price_), 0) as total_price_,
        coalesce(sum(fact.total_quantity_), 0) as total_quantity_,
        coalesce(sum(fact.total_amount_), 0) as total_amount_
        from mf_edw_date_dimension date
        left join (select fact.paid_date_key_,
        fact.total_price_,
        fact.total_quantity_,
        fact.total_amount_
        from mf_edw_order_fact fact
        <where>
            <if test="query.tenantId != null">
                and fact.tenant_key_ = #{query.tenantId}
            </if>
            <if test="query.storeId != null">
                and fact.store_key_ = #{query.storeId}
            </if>
            <if test="query.customerId != null">
                and fact.customer_key_ = #{query.customerId}
            </if>
        </where>
        ) fact on (date.key_ = fact.paid_date_key_)
        where
        <trim prefixOverrides="and">
            <if test="query.year != null">
                and date.year_ = #{query.year}
            </if>
            <if test="query.month != null">
                and date.month_ = #{query.month}
            </if>
            <if test="query.date != null">
                and date.date_ = #{query.date}
            </if>
            <if test="query.dateFrom != null">
                and #{query.dateFrom} <![CDATA[<=]]> date.date_
            </if>
            <if test="query.dateTo != null">
                and date.date_ <![CDATA[<=]]> #{query.dateTo}
            </if>
        </trim>
        group by date.year_month_, date.month_
        order by date.year_month_
    </select>

    <select id="queryTotalOrders" resultMap="TotalOrdersResultMap">
        select coalesce(count(paid_date_key_), 0) as total_count_,
        coalesce(sum(total_price_), 0) as total_price_,
        coalesce(sum(total_quantity_), 0) as total_quantity_,
        coalesce(sum(total_amount_), 0) as total_amount_
        from mf_edw_order_fact
        <where>
            <if test="query.tenantId != null">
                and tenant_key_ = #{query.tenantId}
            </if>
            <if test="query.storeId != null">
                and store_key_ = #{query.storeId}
            </if>
            <if test="query.customerId != null">
                and customer_key_ = #{query.customerId}
            </if>
            <if test="query.date != null">
                and paid_date_key_ = #{query.date}
            </if>
            <if test="query.dateFrom != null">
                and #{query.dateFrom} <![CDATA[<=]]> paid_date_key_
            </if>
            <if test="query.dateTo != null">
                and paid_date_key_ <![CDATA[<=]]> #{query.dateTo}
            </if>
        </where>
    </select>
</mapper>