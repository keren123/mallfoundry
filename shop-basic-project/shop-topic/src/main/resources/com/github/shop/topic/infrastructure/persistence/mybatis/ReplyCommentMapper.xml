<?xml version="1.0" encoding="UTF-8" ?>
<!--
  ~ Copyright 2019 the original author or authors.
  ~
  ~ Licensed under the Apache License, Version 2.0 (the "License");
  ~ you may not use this file except in compliance with the License.
  ~ You may obtain a copy of the License at
  ~
  ~      http://www.apache.org/licenses/LICENSE-2.0
  ~
  ~ Unless required by applicable law or agreed to in writing, software
  ~ distributed under the License is distributed on an "AS IS" BASIS,
  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ~ See the License for the specific language governing permissions and
  ~ limitations under the License.
  -->

<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.github.shop.topic.infrastructure.persistence.mybatis.ReplyCommentMapper">
    <resultMap id="groupedRepliesResultMap"
               type="com.github.shop.topic.infrastructure.persistence.mybatis.GroupedReplies">
        <result property="commentId" column="comment_id_"/>
        <collection property="replies" ofType="com.github.shop.topic.ReplyComment">
            <id property="id" column="id_"/>
            <result property="topicName" column="topic_name_"/>
            <result property="commentId" column="comment_id_"/>
            <result property="replyId" column="reply_id_"/>
            <result property="replyUid" column="reply_uid_"/>
            <result property="replyNickname" column="reply_nickname_"/>
            <result property="uid" column="uid_"/>
            <result property="nickname" column="nickname_"/>
            <result property="message" column="message_"/>
            <result property="likes" column="likes_"/>
            <result property="createTime" column="create_time_"/>
        </collection>
    </resultMap>

    <insert id="insertReplyComment">
        INSERT INTO
            basic_reply_comment (
            id_, topic_name_, comment_id_, reply_id_, reply_uid_, reply_nickname_,
            uid_, nickname_, message_, likes_, create_time_ )
        VALUES (#{id}, #{topicName}, #{commentId}, #{replyId}, #{replyUid}, #{replyNickname},
                #{uid}, #{nikename}, #{message}, #{likes}, #{createTime})
    </insert>

    <delete id="deleteReplyComment">
        DELETE
        FROM
            basic_reply_comment
        WHERE
            id_ = #{replyId}
    </delete>

    <select id="selectListByCommentIds" resultMap="groupedRepliesResultMap">
        SELECT
            id_,
            topic_name_,
            comment_id_,
            reply_id_,
            reply_uid_,
            reply_nickname_,
            uid_,
            nickname_,
            message_,
            likes_,
            create_time_
        FROM
            basic_reply_comment
        <if test="commentIds != null and !commentIds.isEmpty()">
            <foreach collection="commentIds"></foreach>
        </if>
        ORDER BY
            create_time_ DESC
    </select>
</mapper>